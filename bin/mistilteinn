# -*- mode:ruby; coding:utf-8 -*-
require 'pp'
require 'subcommand'
require 'mistilteinn/config'
require 'mistilteinn/git'
require 'mistilteinn/ticket'

class Command
  attr_reader :its, :config, :args

  def initialize(obj)
    obj.command name do|opts|
      opts.description = 'show current ticket list'
    end
  end

  def its
    klass = Mistilteinn::Ticket[config.ticket.source]
    klass.new config
  end

  def run(config, args)
    @config = config
    @args   = args
    action
  end

  @@klass = []
  class << self
    def inherited(k)
      @@klass << k
    end

    def commands
      @@klass
    end

    def name(x)
      define_method(:name){ x }
    end

    def desc(x)
      define_method(:desc){ x }
    end
  end
end

class ListCommand < Command
  name :list
  desc 'show current ticket list'

  def action
    its.tickets.each do|entry|
      puts entry.format
    end
  end
end

class CreateCommand < Command
  name :create
  desc 'create ticket'

  def action
    its.create args.join(' ')
  end
end

class SelfCheckCommand < Command
  name 'self-check'.to_sym
  desc 'check whether mistilteinn works'

  def action
    section "ticket source"
    check("source type") {
      its.class rescue error("'#{config.ticket.source}' is not valid.")
    }
    check(its.class){ its.check }

    section "git"
    check_if("inside work tree?") { Mistilteinn::Git.work_tree? }
    check_if("git-now subcommand") { Mistilteinn::Git.command? 'now' }
    check_if("git-master subcommand") { Mistilteinn::Git.command? 'master' }
    check_if("git-hooks subcommand") { Mistilteinn::Git.command? 'hooks' }

    puts '','Works! Have a good programming!!'
  rescue => e
    puts <<END
#{e.message}

Oh, Mistilteinn does not work.
Please check your system or configure file.
END
    exit 1
  end

  def error(msg)
    raise StandardError.new(msg)
  end

  def section(title)
    puts <<END

------------------------------
#{title}
------------------------------
END
  end

  def check(title, &f)
    print title, " => "
    STDOUT.flush
    puts f.call
  end

  def check_if(title, &p)
    check(title) {
      if p[] then
        "ok"
      else
        error("error")
      end
    }
  end
end

include Subcommands

options  = {}
global_options do|opts|
  options[:config] = File.expand_path '.mistilteinn/config.yaml', Mistilteinn::Git.root
  opts.on('-c CONFIG', '--config=CONIF') do|config|
    options[:config] = config
  end
end

commands = Command.commands.map do|k|
  k.new self
end

name = opt_parse

config = Mistilteinn::Config.load options[:config]

obj = commands.find{|c| c.name == (name || '-').to_sym }
if obj then
  obj.run config, ARGV
else
  puts <<END
Please see '#{$0} help'
END
  exit 1
end
