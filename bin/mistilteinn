# -*- mode:ruby; coding:utf-8 -*-
require 'pp'
require 'subcommand'
require 'mistilteinn/config'
require 'mistilteinn/git'
require 'mistilteinn/ticket'

class Command
  attr_reader :its, :config, :args

  def initialize(obj)
    obj.command name do|opts|
      opts.description = 'show current ticket list'
    end
  end

  def its
    klass = Mistilteinn::Ticket[config.ticket.source]
    @its   = klass.new config
  end

  def run(config, args)
    @config = config
    @args   = args
    action
  end

  @@klass = []
  class << self
    def inherited(k)
      @@klass << k
    end

    def commands
      @@klass
    end

    def name(x)
      define_method(:name){ x }
    end

    def desc(x)
      define_method(:desc){ x }
    end
  end
end

class ListCommand < Command
  name :list
  desc 'show current ticket list'

  def action
    its.tickets.each do|entry|
      puts entry.format
    end
  end
end

class CreateCommand < Command
  name :create
  desc 'create ticket'

  def action
    its.create args.join(' ')
  end
end

include Subcommands

options  = {}
global_options do|opts|
  options[:config] = File.expand_path '.mistilteinn/config.yaml', Mistilteinn::Git.root
  opts.on('-c CONFIG', '--config=CONIF') do|config|
    options[:config] = config
  end
end

commands = Command.commands.map do|k|
  k.new self
end

name = opt_parse

config = Mistilteinn::Config.load options[:config]

obj = commands.find{|c| c.name == name.to_sym }
obj.run config, ARGV
